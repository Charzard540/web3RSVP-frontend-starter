import { Web3Storage, File, getFilesFromPath } from "web3.storage";
const { resolve } = require("path");

// handles the incoming requests

export default async function handler (req,res){
    if (req.method === "POST"){
        return await storeEventData(req, res);
    }else{
        return res
        .status(405)
        .json({ message: "Method not allowed", success: false});
    }
}

// tries to get the data from request body and stores it
// otherwise, returns an error

async function storeEventData (req, res){
    const body = req.body;
    try {
        const files = await makeFileObjects(body);
        const cid = await storeFiles(files);
        return res.status(200).json({ success: true, cid: cid});
    } catch (err){
        return res
        .status(500)
        .json({ error: "Error creating event", success:false});

    }
}

//will return the image in an array, so we can push our data file to this array 
//so we can upload both the image and the event data at the same time

async function makeFileObjects(body){
    const buffer = Buffer.from(JSON.stringify(body));

    const imageDirectory = resolve(process.cwd(), 'public/images/${body.image}');
    const files = await getFilesFromPath(imageDirectory);

    files.push(new File([buffer], "data.json"));
    return files;
}

// create a web3storage client object

function makeStorageClient() {
    return new Web3Storage({ token: process.env.WEB3STORAGE_TOKEN});
}

// call put method on client to upload our array of files

async function storeFiles(files){
    const client = makeStorageClient();
    const cid = await client.put(files);
    return cid;

}

// when our files are uploaded "client.put" returns a 
//content identifier (CID)- the unique hash that we will
//store on-chain to retrieve the files